syntax on
filetype plugin on

set noerrorbells
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set backspace=indent,eol,start
set nu
set nowrap
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set encoding=utf-8
set fileformat=unix
set clipboard=unnamed
set mouse+=a
set relativenumber
" Provides tab-completion for all file related tasks
" - Hit tab to find:
set path+=**
set wildmenu
set incsearch
set hlsearch

" For gruvbox
set termguicolors

" For coc.nvim
set hidden
set updatetime=300
set shortmess+=c
set signcolumn=yes

" set colorcolumn=80
" highlight ColorColumn ctermbg=235 guibg=lightgrey

" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" User-defined commands must start with a capital letter
command! RefreshConfig source $MYVIMRC

" Map <Leader> to <Space>
let mapleader = "\<Space>"

" Faster browsing
nmap J 5j
nmap K 5k
vmap J 5j
vmap K 5k

"Split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Clear all highlight from search
nnoremap <Leader><Space> :noh<CR>

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'majutsushi/tagbar'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Yggdroot/indentLine'
" Theme plugins
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
" WebDev
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'mattn/emmet-vim'

call plug#end()


" NERDTree auto open
let NERDTreeMinimalUI=1
let NERDTreeShowHidden=1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>

" gruvbox theme settings
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

" airline settings
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffers_label = 'BUFFERS'
let g:airline#extensions#tabline#tabs_label = 'TABS'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '%s '
let g:airline_mode_map = {
      \ '__'     : '-',
      \ 'c'      : 'C',
      \ 'i'      : 'I',
      \ 'ic'     : 'I',
      \ 'ix'     : 'I',
      \ 'n'      : 'N',
      \ 'multi'  : 'M',
      \ 'ni'     : 'N',
      \ 'no'     : 'N',
      \ 'R'      : 'R',
      \ 'Rv'     : 'R',
      \ 's'      : 'S',
      \ 'S'      : 'S',
      \ '^S'     : 'S',
      \ 't'      : 'T',
      \ 'v'      : 'V',
      \ 'V'      : 'V',
      \ '^V'     : 'V',
      \ }

" TagBar Settings
map <C-t> :TagbarToggle<CR>

" coc-nvim Settings
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gr <Plug>(coc-references)
nnoremap <leader>d :<C-u>CocList diagnostics<cr>
nnoremap <leader>s :<C-u>CocList -I symbols<cr>
nmap <leader>a <Plug>(coc-codeaction)
nmap <leader>rn <Plug>(coc-rename)

let g:coc_global_extensions = []
let g:coc_global_extensions += ['coc-clangd']
let g:coc_global_extensions += ['coc-json']
let g:coc_global_extensions += ['coc-html']
let g:coc_global_extensions += ['coc-css']
let g:coc_global_extensions += ['coc-tsserver']
let g:coc_global_extensions += ['coc-python']

if executable('prettier')
    let g:coc_global_extensions += ['coc-prettier']
    command! -nargs=0 Prettier :CocCommand prettier.formatFile
endif

" FZF Settings
nnoremap <silent> <C-p> :Files<CR>

if has('nvim') && !exists('g:fzf_layout')
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=1 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif
